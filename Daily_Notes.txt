1:- Section 3 => 13. Pure React
Notes:- 
a. Pure React installation using some scripts that in React documentation with using any tools

2:- Navigate from C drive to D drive using cmd = cd /d d:

3: command for creating the React app = npx create-react-app@5 project-name
4: quokka extension use for js/ts to run on vscode rapid for using quokka open command platte and then type quokka start
5: Learn about destructuring the array of objects and array iteself in  [ Section 4: 18 ]

6: Learn about rest and spread operator in JS [ Section 4: 18 ]

More Details on spread operator:-
let objNew = [
  {
    id:1,
    title:"Cohort",
    day:"Monday",
    gender:[
      "male",
      "female",
      "others"
    ]
  },{
    id:2,
    title:"Striver",
    day:"Sunday",
    color:[
      "red",
      "yellow",
      "green"
    ]
  }
]
// //console.log(objNew);
// const updateMyObj = {...objNew,completed:"false",day:"tuesday"};   // means convert your array of objects into a object type
// console.log(updateMyObj);  // O/P = object
function getObject(id){
  return objNew.find((d) => d.id === id)
}
const temp = getObject(1);
const updateTemp = {...temp,title:"Web 3",completed:"false"};
console.log(updateTemp);


// Rule of spread operator 
// If you want to spread the array then you have to use the square bracket with that [...temp]
// If you want to spread the objects then you have to use the curly bracket with that {...temp}


7. Learn about template literals in JS that is `{title}, a book and consists of {pages}-pages` [Section-4 20]
8. Learn about ternary operator in JS:- [Section 4-21]
const pages = 1000;
const result = pages>1000 ? "pages is more than 1000" : "pages is less than or equal to 1000"
console.log(result);   
9. Learn about arrow function in JS that is used when you function have one line of statement: {Section 4-22}

10. Learn about && and || operator and also a special operator that is nullish colleshing operator that also short circuit the falsy values.
falsy values are:- 0, '',null,undefined [Section 4-23]

11. Learn about nullish colleshing ? used when we don't know the exist data or not  [Section 4-24]
12. Learn about map,filter,reduce -> Section[4-25,26,27]
13. Learn about sort method in array -> Section[4-28]
14. Learn about update,add,delete from array of objects -> [Section 4-29]
15. Learn about promises in JS -> [Section 4-30]
16. Learn about async/await in JS -> [Section 4-31]


====================================================================================
SECTION 5:-
1. Section[5-32] is all abour overview in this Section.

* Section[5-33] :-
1. Entry point in the react project is index.js

* Section[5-34]:-
1. How to stop the application of react shortcut by using ctrl + c and start again by using npm start
2. Google the error for react rather than watch youtube video

* Section[5-35]:-
1. theory of components

* Section[5-36]:-
1. How to select multiple folder/file in vs code by holding the ctrl and right click on specific folder and chose one by one option copy
2. In react components name start will capital letter and also return some markup means jsx
3. Always one component return one markup you can wrap up other markup inside parent markup
4. Never nest other component inside another component bcz it is bad practice it work but don't do that.

5. All the assests folder like images, video and etc should be in public folder bcz web pack means react bundle automatincally find that easily
6. Reusing the component by just write the component in root component

*Section[5-37]:-
1. What is JSX in react -> JSX is a decalarative syntax means in react we only focus on how UI should look like thorugh JSX and all dom task done by react iteself.

*Section[5-38]:-
1. Build multiple components for pizza project
2. Combining smaller component into bigger components for building complex UI

*Section[5-39]:-
1. Write some JS code inside the function component not inside the JSX 

*Section[5-40]:-
1. component is all about three things that are logic,appereance and Data that's why react is all about components.

*Section[5-41]:-
1.How to use CSS inside JSX using double curly braces
2. How to use global styles inside JSX and means as we import styles from index.css they all are global styles use anywhere in the components.

*Section[5-42]:-
1. How to use props here props means pass data from parent component to child component .
2. Two steps are there in props to use:
   a. First pass to the component.
   b. Receice the props to the child component.
   c. Here props are object so when u use in child component always used in Javascript mode means inside curly braces {props.name} like that.

*Section[5-43]:-
1. Diff b/w props and state are props are upcoming data from parent component to child component and state are local data of a particular component
2. So from above line it means that props are immutable by child component instead you have to mutate the props so update the props thru state.
3. React follow one-way data flow means only from parent component to child component props pass not vice-versa.

*Section[5-44]:-
1. Make a Profile Card project

*Section[5-45]:-
1. Learn abour rule in JSX for better understanding go thru the slides and inside jsx we only have to write the JS part which produces a value not like using if-else or something else that do not produce any value.

*Section[5-46]:-
1. Rendering the list from pizzaData array to the menu component using map.
2. Here I learn about how to pass component inside map function.

*Section[5-47]:-
1. Learn about how to do conditional Rendering with && inside component to render UI according to the condition

*Section[5-48]:-
1. Learn about how to do conditional Rendering with ternary operator inside component to render UI according to the condition

*Section[5-49]:-
1. Learn about how to do conditional Rendering with multiple returns statement.

*Section[5-50]:-
1. Extracting JSx into a component

*Section[5-51]:-
1. destructuring thw props means not write like this props.something rather in child component destructure the props like {pizzaObj} use that and keep in mind that name should be same as what tha props you pass in parent component.
2. From destructuring props is give us advantage means we clearly see that what props pass from parent component to child component.

*Section[5-52]:-
1. Learn about react fragment -> use when we need to render more than one element inside jsx bcz as per jsx rule it only have one parent element.

*Section[5-53]:-
1. conditional set the text content of any element and set the className according to some condition.

*Section[5-54]:-
1. revise the topics

*Section[5-55]:-
1. challenge for Profile Card => thru this challenge I actually code about how to render a list using map inside jsx and how to render inner text of element with some conditional Rendering.
2. Also learn about how to write three condition in ternary operator like:-
   Ex:-  {skillObj.level === "advanced" ? (<span>💪</span>) : skillObj.level === "intermediate" ? ( <span>👍</span>) : (  <span>😯</span>)}

========================================================================================

*Section[6-56]:-
1.Section overview

*Section[6-57]:-
1. Make a step project component.

*Section[6-58]:-
1. How to handle click event in react
2. Note that don't ever calling a function inside eventHandle bcz react directly execute that function.
3. Always when you handle event in react make separate eventHandler function like handlePrevious and handleNext

*Section[6-59]:-
1. learn about what is state.

*Section[6-60]:-
1. Three steps to use useState:-
   a. First create state variable.
   b. use in jsx.
   c. update the state variable major time in eventHandler.

2. Any state start with use keyword are known as hooks in react
3. Always place useState in starting point of functional component.

*Section[6-61]:-
1. State in react are immutable means not directly change the state varibale rather thn used tools that react given like setter function thru you can change the state varibale. like:- const [step,setStep] = useState(1);  // here we use const due to react are immutable means we can not directly change the step rather thru setter function we change step value.

*Section[6-62]:-
1. Learn about mechanism of state.

*Section[6-63]:-
1. Build steps component and make another state.

*Section[6-64]:-
1. learn about how to use react dev tools means how to change the value of state to check how UI will look like.

*Section[6-65]:-
1. Don't update state based on your current state bcz for let in future if you want that state update twice so if simply update the state like that:-   setStep(step+1) ;
         setStep(step+1) ; 
         // In above code state only update one time bcz due to sync nature of JS

2. So rather than update the state with callback function so that other task will also execute like that:-
   setStep((step) => step+1);
    setStep((step) => step+1);
    // in above case step update twice in single moment. AND this is the best practice to update the state using callback function.

*Section[6-66]:-
1. UI is all about function of state means whatever the state similar the UI.
2. use state where you find that particular component change over time.
3. Learn guidelines related to state.

*Section[6-67]:-
1. Learn that every component if it is same component used in parent component two times there state are individual for both child component.
Ex:- if we use Step card component two times and any changes in first step card component does not do any effect on second step child component.
2. Every component have there own independent state it does not matter that component are same.

*Section[6-68]:-
1. Do challenge give by Jonas -> challenge completed by me.

*Section[6-69]:-
1. Start building amazing projects:- Summary about project.

*Section[6-70]:-
1. Build layout or UI of the project.

*Section[6-71]:-
1. Rendering the item list by using map concept.

*Section[6-72]:-
1. Learn new thing that always pass key in component rather than in any jsx and in any html tag.


2. When any event occur it pass the event object that is 'e' we used that 'e' to target anything in that event like:-
   onSubmit={handleSubmit}  -> another way write this line onSubmit = {{e} => handleSubmit(e)}
   function handleSubmit(e){
    e.target.value // like this 
   }


3. In html wheneven any form submit means event occur page reload but in react we want to build single page application without reload so how to this by stoping the default behaviour of html 😃:-
   function handleSubmit(e){
    e.preventDefault() // this will stop the page reload behaviour of html. 
   }

4. Diff b/w onSubmit -> use in form tag in html means if enter in form OR click on button of submit -> both work same for submitting the form content. While onClick -> only work for button tag means no enter tap feature in there in onClick tag.

*Section[6-73]:-
1. Learn about how to controlled the element thru react it have three steps:- 1. define the state 2. use the state variable 3. update the state variable thru event function like onChange.
2. e.target.value = by default a string.
3. Date only flow down the tree means from parent command to child component here data means props not in siblings.

*Section[6-74]:-
1. Diff b/w state and props:- Look in slides.

*Section[6-75]:-
1. challenge solve flashcards

*Section[6-76]:-
1. challenge solve v2-counter

==============================================================😀😀😀========================================================================

*Section[7-77]:-
1. overview of this Section.

*Section[7-78]:-
1. How to think in react.
 
*Section[7-79]:-
1. Fundamentals of state management when and where to use state.

*Section[7-80]:-
1. Learn new concept lifting up the state means whenever we need same state in more than one child component so we uplift the state means declare that to the closest parent componen bcz in react data flow from parent to child component not vice - versa.
2. So whenever we need same state in more than one child component declare that state in parent component should we should follow react principles.

*Section[7-81]:-
1. More details explanation about lifting up the state.

*Section[7-82]:-
1. delete item from the list.

*Section[7-83]:-
1. Learn about derive state means when you figure out that another state easily calculate and you need that stuff so rather than creating a new state try to derive the state bcz it will decrease a number of re-render happen.
2. Or you can say that when you calculate the computed value from other state and use that value in your project so never create another state to increase the re-render operation. like i am doing in travel list project for footer section i again create a new state.


*Section[7-84]:-
1. Derived state do some UI part of travel list

*Section[7-85]:-
1. Derived state implementation in travel list.

*Section[7-86]:-
1. Like if sort the original in the new array iteself in that case original array is also sorted due to sort function mutate the original array as well as the new array so keep in mind first slice the original array then apply sort method on new array so that it can't effect the original array.

*Section[7-87]:-
1. Sort the new array on the basis of sortBy in travel list project.
2. implement clear the list in travel list by me and learn about window.confirm() means confirm from the user before delete all items.

*Section[7-89]:-
1. Learn about how to import other component into another component.
Two things in export and import are:-
a. When you give export default someComponentName -> So can import in another component like this import someComoonentName from './someComponentName.js'
b. When you do not give default to someComponentName -> So you can import like import {someComponentName} from './someComponentName.js' 
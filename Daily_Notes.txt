1:- Section 3 => 13. Pure React
Notes:- 
a. Pure React installation using some scripts that in React documentation with using any tools

2:- Navigate from C drive to D drive using cmd = cd /d d:

3: command for creating the React app = npx create-react-app@5 project-name
4: quokka extension use for js/ts to run on vscode rapid for using quokka open command platte and then type quokka start
5: Learn about destructuring the array of objects and array iteself in  [ Section 4: 18 ]

6: Learn about rest and spread operator in JS [ Section 4: 18 ]

More Details on spread operator:-
let objNew = [
  {
    id:1,
    title:"Cohort",
    day:"Monday",
    gender:[
      "male",
      "female",
      "others"
    ]
  },{
    id:2,
    title:"Striver",
    day:"Sunday",
    color:[
      "red",
      "yellow",
      "green"
    ]
  }
]
// //console.log(objNew);
// const updateMyObj = {...objNew,completed:"false",day:"tuesday"};   // means convert your array of objects into a object type
// console.log(updateMyObj);  // O/P = object
function getObject(id){
  return objNew.find((d) => d.id === id)
}
const temp = getObject(1);
const updateTemp = {...temp,title:"Web 3",completed:"false"};
console.log(updateTemp);


// Rule of spread operator 
// If you want to spread the array then you have to use the square bracket with that [...temp]
// If you want to spread the objects then you have to use the curly bracket with that {...temp}


7. Learn about template literals in JS that is `{title}, a book and consists of {pages}-pages` [Section-4 20]
8. Learn about ternary operator in JS:- [Section 4-21]
const pages = 1000;
const result = pages>1000 ? "pages is more than 1000" : "pages is less than or equal to 1000"
console.log(result);   
9. Learn about arrow function in JS that is used when you function have one line of statement: {Section 4-22}

10. Learn about && and || operator and also a special operator that is nullish colleshing operator that also short circuit the falsy values.
falsy values are:- 0, '',null,undefined [Section 4-23]

11. Learn about nullish colleshing ? used when we don't know the exist data or not  [Section 4-24]
12. Learn about map,filter,reduce -> Section[4-25,26,27]
13. Learn about sort method in array -> Section[4-28]
14. Learn about update,add,delete from array of objects -> [Section 4-29]
15. Learn about promises in JS -> [Section 4-30]
16. Learn about async/await in JS -> [Section 4-31]


====================================================================================
SECTION 5:-
1. Section[5-32] is all abour overview in this Section.

* Section[5-33] :-
1. Entry point in the react project is index.js

* Section[5-34]:-
1. How to stop the application of react shortcut by using ctrl + c and start again by using npm start
2. Google the error for react rather than watch youtube video

* Section[5-35]:-
1. theory of components

* Section[5-36]:-
1. How to select multiple folder/file in vs code by holding the ctrl and right click on specific folder and chose one by one option copy
2. In react components name start will capital letter and also return some markup means jsx
3. Always one component return one markup you can wrap up other markup inside parent markup
4. Never nest other component inside another component bcz it is bad practice it work but don't do that.

5. All the assests folder like images, video and etc should be in public folder bcz web pack means react bundle automatincally find that easily
6. Reusing the component by just write the component in root component

*Section[5-37]:-
1. What is JSX in react -> JSX is a decalarative syntax means in react we only focus on how UI should look like thorugh JSX and all dom task done by react iteself.

*Section[5-38]:-
1. Build multiple components for pizza project
2. Combining smaller component into bigger components for building complex UI

*Section[5-39]:-
1. Write some JS code inside the function component not inside the JSX 

*Section[5-40]:-
1. component is all about three things that are logic,appereance and Data that's why react is all about components.

*Section[5-41]:-
1.How to use CSS inside JSX using double curly braces
2. How to use global styles inside JSX and means as we import styles from index.css they all are global styles use anywhere in the components.

*Section[5-42]:-
1. How to use props here props means pass data from parent component to child component .
2. Two steps are there in props to use:
   a. First pass to the component.
   b. Receice the props to the child component.
   c. Here props are object so when u use in child component always used in Javascript mode means inside curly braces {props.name} like that.

*Section[5-43]:-
1. Diff b/w props and state are props are upcoming data from parent component to child component and state are local data of a particular component
2. So from above line it means that props are immutable by child component instead you have to mutate the props so update the props thru state.
3. React follow one-way data flow means only from parent component to child component props pass not vice-versa.

*Section[5-44]:-
1. Make a Profile Card project

*Section[5-45]:-
1. Learn abour rule in JSX for better understanding go thru the slides and inside jsx we only have to write the JS part which produces a value not like using if-else or something else that do not produce any value.

*Section[5-46]:-
1. Rendering the list from pizzaData array to the menu component using map.
2. Here I learn about how to pass component inside map function.

*Section[5-47]:-
1. Learn about how to do conditional Rendering with && inside component to render UI according to the condition

*Section[5-48]:-
1. Learn about how to do conditional Rendering with ternary operator inside component to render UI according to the condition

*Section[5-49]:-
1. Learn about how to do conditional Rendering with multiple returns statement.

*Section[5-50]:-
1. Extracting JSx into a component

*Section[5-51]:-
1. destructuring thw props means not write like this props.something rather in child component destructure the props like {pizzaObj} use that and keep in mind that name should be same as what tha props you pass in parent component.
2. From destructuring props is give us advantage means we clearly see that what props pass from parent component to child component.

*Section[5-52]:-
1. Learn about react fragment -> use when we need to render more than one element inside jsx bcz as per jsx rule it only have one parent element.

*Section[5-53]:-
1. conditional set the text content of any element and set the className according to some condition.

*Section[5-54]:-
1. revise the topics

*Section[5-55]:-
1. challenge for Profile Card => thru this challenge I actually code about how to render a list using map inside jsx and how to render inner text of element with some conditional Rendering.
2. Also learn about how to write three condition in ternary operator like:-
   Ex:-  {skillObj.level === "advanced" ? (<span>💪</span>) : skillObj.level === "intermediate" ? ( <span>👍</span>) : (  <span>😯</span>)}

========================================================================================

*Section[6-56]:-
1.Section overview

*Section[6-57]:-
1. Make a step project component.

*Section[6-58]:-
1. How to handle click event in react
2. Note that don't ever calling a function inside eventHandle bcz react directly execute that function.
3. Always when you handle event in react make separate eventHandler function like handlePrevious and handleNext

*Section[6-59]:-
1. learn about what is state.

*Section[6-60]:-
1. Three steps to use useState:-
   a. First create state variable.
   b. use in jsx.
   c. update the state variable major time in eventHandler.

2. Any state start with use keyword are known as hooks in react
3. Always place useState in starting point of functional component.

*Section[6-61]:-
1. State in react are immutable means not directly change the state varibale rather thn used tools that react given like setter function thru you can change the state varibale. like:- const [step,setStep] = useState(1);  // here we use const due to react are immutable means we can not directly change the step rather thru setter function we change step value.

*Section[6-62]:-
1. Learn about mechanism of state.

*Section[6-63]:-
1. Build steps component and make another state.

*Section[6-64]:-
1. learn about how to use react dev tools means how to change the value of state to check how UI will look like.

*Section[6-65]:-
1. Don't update state based on your current state bcz for let in future if you want that state update twice so if simply update the state like that:-   setStep(step+1) ;
         setStep(step+1) ; 
         // In above code state only update one time bcz due to sync nature of JS

2. So rather than update the state with callback function so that other task will also execute like that:-
   setStep((step) => step+1);
    setStep((step) => step+1);
    // in above case step update twice in single moment. AND this is the best practice to update the state using callback function.

*Section[6-66]:-
1. UI is all about function of state means whatever the state similar the UI.
2. use state where you find that particular component change over time.
3. Learn guidelines related to state.

*Section[6-67]:-
1. Learn that every component if it is same component used in parent component two times there state are individual for both child component.
Ex:- if we use Step card component two times and any changes in first step card component does not do any effect on second step child component.
2. Every component have there own independent state it does not matter that component are same.

*Section[6-68]:-
1. Do challenge give by Jonas -> challenge completed by me.

*Section[6-69]:-
1. Start building amazing projects:- Summary about project.

*Section[6-70]:-
1. Build layout or UI of the project.

*Section[6-71]:-
1. Rendering the item list by using map concept.

*Section[6-72]:-
1. Learn new thing that always pass key in component rather than in any jsx and in any html tag.


2. When any event occur it pass the event object that is 'e' we used that 'e' to target anything in that event like:-
   onSubmit={handleSubmit}  -> another way write this line onSubmit = {{e} => handleSubmit(e)}
   function handleSubmit(e){
    e.target.value // like this 
   }


3. In html wheneven any form submit means event occur page reload but in react we want to build single page application without reload so how to this by stoping the default behaviour of html 😃:-
   function handleSubmit(e){
    e.preventDefault() // this will stop the page reload behaviour of html. 
   }

4. Diff b/w onSubmit -> use in form tag in html means if enter in form OR click on button of submit -> both work same for submitting the form content. While onClick -> only work for button tag means no enter tap feature in there in onClick tag.

*Section[6-73]:-
1. Learn about how to controlled the element thru react it have three steps:- 1. define the state 2. use the state variable 3. update the state variable thru event function like onChange.
2. e.target.value = by default a string.
3. Date only flow down the tree means from parent command to child component here data means props not in siblings.

*Section[6-74]:-
1. Diff b/w state and props:- Look in slides.

*Section[6-75]:-
1. challenge solve flashcards

*Section[6-76]:-
1. challenge solve v2-counter

==============================================================😀😀😀========================================================================

*Section[7-77]:-
1. overview of this Section.

*Section[7-78]:-
1. How to think in react.
 
*Section[7-79]:-
1. Fundamentals of state management when and where to use state.

*Section[7-80]:-
1. Learn new concept lifting up the state means whenever we need same state in more than one child component so we uplift the state means declare that to the closest parent componen bcz in react data flow from parent to child component not vice - versa.
2. So whenever we need same state in more than one child component declare that state in parent component should we should follow react principles.

*Section[7-81]:-
1. More details explanation about lifting up the state.

*Section[7-82]:-
1. delete item from the list.

*Section[7-83]:-
1. Learn about derive state means when you figure out that another state easily calculate and you need that stuff so rather than creating a new state try to derive the state bcz it will decrease a number of re-render happen.
2. Or you can say that when you calculate the computed value from other state and use that value in your project so never create another state to increase the re-render operation. like i am doing in travel list project for footer section i again create a new state.


*Section[7-84]:-
1. Derived state do some UI part of travel list

*Section[7-85]:-
1. Derived state implementation in travel list.

*Section[7-86]:-
1. Like if sort the original in the new array iteself in that case original array is also sorted due to sort function mutate the original array as well as the new array so keep in mind first slice the original array then apply sort method on new array so that it can't effect the original array.

*Section[7-87]:-
1. Sort the new array on the basis of sortBy in travel list project.
2. implement clear the list in travel list by me and learn about window.confirm() means confirm from the user before delete all items.

*Section[7-89]:-
1. Learn about how to import other component into another component.
Two things in export and import are:-
a. When you give export default someComponentName -> So can import in another component like this import someComoonentName from './someComponentName.js'
b. When you do not give default to someComponentName -> So you can import like import {someComponentName} from './someComponentName.js'.

*Section[7-90]:-
1. Learn about osm topic that is children props => basically children props arw those props that is between the component jsx like:-
For Ex:- <Button><span>Previous 👈</span></Button> 
// in this line children props are <span>Previous 👈</span> you can pass to child component with predefined name that is 'children' you can use this children inside you jsx .

2. And from children props you don't have passed unnessary props to child component.
3. For ussing the children props between your component use have to use this type of syntax <Button>....children props</Button>

*Section[7-91]:-
1. Again use the concept of children props to create StepMessage component in steps project.

*Section[7-92]:-
1. Accordion component code with new concept.

*Section[7-93]:-
1. Tip calculator challenge completed by me.

*Section[7-94]:-
1. Start with new Project using Previous concept.

*Section[7-95]:-
1. Project Setup

*Section[7-96]:-
1. Build a static page for eat-n-split project.

*Section[7-97]:-
1. Style the eat-n-split project build components.
2. Learn onew new attribute that is 'disabled' attribute in input box that basically disable the input box typing means we don't intract with that input tag.

*Section[7-98]:-
1. Code some more components in eat-n-split project.

*Section[7-99]:-
1. Wire up the state and code useing useState.

*Section[7-100]:-
1. Wire the up the state and make some new state for show the friend that selected in friendlist component and show in splitbill component.

*Section[7-101]:-
1. Creating controlled element.

*Section[7-102]:-
1. Apply split operation.

✅ completed Section - 7
=============================================================================================================================

✅ completed section - 8
=============================================================================================================================

✅ completed section - 9
=============================================================================================================================

🎯 Started section - 10:-
=============================================================================================================================

*Section[10-105]:-
1. overview of the section.

*Section[10-106]:-
1. Setting up the new project know as usepopcorn

*Section[10-107]:-
1. How to split the UI into components review slides for better understanding.

*Section[10-108]:-
1. Divide the component according to react best practice.

*Section[10-109]:-
1. Learn about three types of components :-
   a. Stateless component.
   b. Statefull component.
   c. Structural component.

*Section[10-110]:-
1. Learn about prop drilling why we don't focus on prop drilling.
2. And lift up state movies state so that we can do props drilling.

*Section[10-111]:-
1. component composition -> means as we pass {children} between component so that component will be resuable and flexible.
2. Similarly component composition -> pass {children} where we can replace {children} with another component like:-
   Here below in Model component
   <Model>
     {children}
   </Model>

   When we use that Model component in parent app component like that:-
  <Model>
    <Error/>
  </Model>
3. We need components composition so that our components will be flexible and resuable and build layout that is flexible and remove props drilling issue.

*Section[10-112]:-
1. Fix out props drilling issue with component composition.

*Section[10-113]:-
1. There is ListBox component in usepopcorn project we rename that component into Box component and make a resuable component.
2. And delete that WatchedBox component bcz similar stuff also inside a Box component.

*Section[10-114]:-
1. Here we pass {children} in two ways first {children} which is called implicit pass.
2. Second is <Box element={MovieList movies={movies}} /> like that than in Box component pass element and use that.

*Section[10-115]:-
1. Learn about setting a default props in react like StarRating({maxRating=5}).
2. Build a separate StarRating component.

*Section[10-116]:-
1. Creating the stars and make it dynamic using useState.

*Section[10-117]:-
1. Handle hover event on the star.
2. Learn about 2 new event onMouseEnter and onMouseLeave.
3. Create a new state that is called as tempRating state to store temporary rating onMouseEnter and onMouseLeave.

*Section[10-118]:-
1. How to make a balance with less props and more than props means when making a components balance out the props and think I like consumer point of view means make that type of component that basically consumer easily consume.

*Section[10-119]:-
1. Learn new thing on npm how to publish your component that basically provide resuablility.
2. Create a Star component as public API so anyone can use that according to there flexibility.
3. Add some customize in StarRating componennt so that user can use in his/her favour.

*Section[10-120]:-
1. Intialize props types in react so that user use StartRating component with required data types.

*Section[10-121]:-
1. challenge completed TextExpander

✅ completed Section - 10:- ======================================================================================


🎯 Section-11:-

*Section[11-122]:-
1. Section overview.

*Section[11-123]:-
1. Project 08-how-react-works setup and walkthru.

*Section[11-124]:-
1. Learn about component,component instance and react element.
  🔥 React component life cycle:-  component -> component instance -> react element -> DOM element(html)
     Here :- component -> is a js function there render the UI in the website. Ex:- <Tab/>
             component instance -> create an instance of component instance. Ex:- Return <Tab/> as many time as you can.
             react element -> that basically store the information regarding DOM of the UI.

*Section[11-125]:-
1. Symbol data types in JS cannot be converted into JSON format
2. Never directly call the react component like this {TabContent({item:content.at(0)})} bcz this will work no error will come.
3. But react not looking in this TabContent as a component instance.
4. So that's why always render it inside JSX format like that <TabContent item={content.at(0)}/> // so that component instance will be create and manage the state as well so that react rules will not violet.

*Section[11-126]:-
1. Learn about react Rendering in more depth -> update the state -> render phase -> commit phase -> display updated UI.

*Section[11-127]:-
================================== React Render Phase ===========================================

1. Learn about render phase that consists of -> virtual dom -> current fiber tree (reconcilation) -> update fiber tree -> list of dom updates.
2. according to state update some part of virtual dom update that is sync with that state and first time when component render a so called fiber tree also create and a intial virtual dom create.
3. And state change virtual dom change with respect to their state and that update virtual dom -> update the fiber tree -> so that actual dom will update only with specific part that was updated with state changes not whole dom will update.
4. Diffing => compare the element of previous fiber tree with updated fiber tree element so that create a list of DOM Elements/
5. Render phase may be asynchronous phase means UI update depend on some previous UI update.

*Section[11-128]:-
========================================= React Commit Phase ===========================================

1. Render phase handle by React library
2. Commit phase handle by React DOM library means react iteself not knowing what is DOM.
3. Browser Paint means UI reflect on the screen handle by Browser like chrome,etc.
4. Learn about commit phase -> update List of DOM Elements -> updated DOM -> UI reflect.
5. Keep in mind fiber tree create only one time during first of UI render only the screen after that fiber tree reuse and update that's all.
6. Commit Phase is synchronous means at one go UI will update and keep consistent UI.
🔥
7. reconcilation means pick every update react element and compare with fiber tree react element and here fiber is a reconciler and Diffing is a algorithm that is used to compare the update react element with fiber tree react elements so that necessary element will update not all and then create a list of update react elements -> than goes into commit phase where compare with actual dom element and update the dom at one go and keep updated UI and that is Sync with state changes.
🔥 
🚨 whole Summary of Section[11-127 & 11-128]:-
   Trigger(Initial Render) -> React Render phase -> React Commit phase -> UI reflect.

*Section[11-129]:-
1. Learn about how Diffing algorithm works.

*Section[11-130]:-
1. Learn about Diffing rules means if component with same element at same position than state is preserved/safe and if component with different element at same position that previous component at same position will be destroyed and state will reset.
2. Take example from Tab 4 -> have something else in there component tree that's why state of likes will reset.

*Section[11-131]:-
1. Learn about key prop to tell the diffing algorithm that every Tab is unique and Tab has there own state of likes.
2. Always use a key prop :-
  a. Keys in lists :- when multiple child component are same that key is know as stable key and increase the preformance of react.
  b. key prop to reset state:- Like in Tab component multiple but no one uniquely identify so that's why state will not reset so then use key     prop .

*Section[11-132]:-
1. Resetting state with the Key prop in 08-how-react-works.

*Section[11-133]:-
1. Use Key-prop in eat-n-split project to fix out bugs.

*Section[11-134]:-
1. Learn about 2 types of logic in react components:-
   a. Render Logic :- That execute first page load 
   b. Event Handler Logic :- execute when some event occur like state changes, http request.

2. Learn about functional programming principles in react :-
   a. Side effect(Impure function) -> give same input but different output.
   b. Pure function -> give same input with same output occur.

3. So from that if you have to side effect like http request , etc then use useEffect hook for that to do some outside thing in your project according to project requirements.

*Section[11-135]:-
1. Learn about In React-18 and if you want that your some state will reset after some work and that that some state in same function so react-18 will batched all state and at one go it reset the state rather than line by line reset the state.
2. Means React-18 minimize the re-render.

*Section[11-136]:-
1. batched the state -> is a asynchronous task and React-18 automatincally batched the state.
2. Do some real practice with bacthed the state:-
   Code:-
     function handleTripleInc() {
    // setLikes(likes + 1);
    // setLikes(likes + 1);
    // setLikes(likes + 1);
    // this above three lines code are async so that's at the end likes === 1 not 3

    // So from above problem we move out as that we apply a callback inside setLikes so that it sync with previous state and come up with likes=3
    setLikes((likes) => likes + 1);
    setLikes((likes) => likes + 1);
    // console.log(likes); // here likes === 0 bcz batching the state is async task so async task will that likes value will be change
    setLikes((likes) => likes + 1);
  }
3. batching the state not only happen inside eventHandler but also outside the react like JS setTimeOut(handleUndo,2000).
4. And before React-18 automatic batching not happening means for every state to reset to it original state react re-render everytime.